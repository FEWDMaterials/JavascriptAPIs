{"home":{"content":"# Building JS Apps with API Data\n---\n\nHello, [Wrold](https://medium.com/@the_taqquikarim/console-log-hello-wrold-3e3abeb44396#.vk701xxec)! Welcome to Javascript APIs.\n\n### Objective\n---\nOur main today is to learn how we can leverage 3rd party APIs to enrich our webpages with dynamic data.\n\nWe will cover **public APIs** only, since those don't require anything more than some js code to configure. This means we will **not** talk about the twitter or facebook APIs which require a user authentication component to work correctly.\n\n##### What we will talk about\nAPIs. RESTful verbs. GET, POST, PUT, DELETE. Retrieving data. Displaying data. Promises. Asynchronous operations. Templating.\n\n##### What we will NOT talk about\nRouting. This is not an SPA class though typically pulling API data and displaying them via frontend routes are very closely related. If we have time towards the end we will consider going over this.\n\n### Game Plan\n---\n\n#### [Warm-up: Simple GET requests](#warm-up)\nThe assumption is you've probably worked with API data before. Even if you have not, with jQuery, it's literally just 4 or 5 lines of code to get started.\n\n#### [Wrangling Asynchronousness: Dealing with multiple requests](#wrangling-asynchronousness)\nHow do we force asynchronous requests to execute in order?\n\n#### [Exploring RESTful APIs: What is REST?](#exploring-restful-apis)\nWe have a good handle on GET requests, but what about all the other types? Specifically POST, PUT, DELETE?\n\n#### [Using Promises: Better handling asynchronous requests](#using-promises)\nWhat are promises and how can we use them to make it easier for us to draw data together from multiple sources?\n\n\n\n\n\n","idx":0},"title":{"content":"Building JS Apps with API Data","idx":1},"desc":{"content":"A crash course on APIs, AJAX, and promises.","idx":2},"warm-up":{"content":"# Warm-up: Simple GET requests\n---\n\nLet's take a moment to define the term `API` and how we can use them to retrieve data from remote resources.\n\n## Using APIs\n---\nSimply put, working with APIs require three distinct steps.\n\n### Requesting Data\nRequesting data involves delving into API documentation to understand which API endpoints to direct your requests towards.\n\nThen, you must actually make the GET request.\n\n\n### Retrieving Data\nData retrieval involves taking the server response from your GET requests.\n\nTypically, server responses will send back data in JSON format. It is up to the API consumer (you) to determine how to extract that data for usage in your app.\n\nAlso, don't forget to handle errors!\n\n### Displaying Data\nThis final piece involves updating the UI of your application with the data you extracted from the server response.\n\nGenerally, the techniques you may know from jQuery for injecting data won't do here. We will use some form of templating system to achieve our data displaying needs.\n\n## Project Work\n---\n\n#### Project 1 (we do)\nWe will build a simple Giphy Search Engine. User will input a search query which will lead to results rendered as gifs.\n\n**Requesting data**\n\nHere is the [Giphy API](https://api.giphy.com/) documentation.\n\nWe will also implement our own `$.get` request to understand the guts of how AJAX is handled in javascript.\n\n```js\nconst $ = {\n    get() {\n        /* ...implement GET... */\n    }\n};\n```\n\n**Retrieving Data**\n\nIdeally, we want to take the JSON response and convert it into an array or some other type of data structure that makes it easy for us to access the giph info (specifically in this case, the giph URL).\n\n```js\n// something like...\nconst data = JSON.data.map((gif) => {\n    const { src, title } = gif;\n    return { src, title };\n});\n```\n\n**Displaying Data**\n\nWe will use es6 string interpolation to handle our \"templating\". This is the most lightweight and easiest option.\n\n```js\nconst data = {}; /* data from prev section */\nreturn data.map((current) => {\n    return `\n<div>\n    ${current.src}\n</div>`;\n}).join('\\n');\n```\n\n\n#### Follow up (you do)\nBuild in an **I'm feeling lucky** feature. (In other words, user should be able to perform a search query and get back the top result **only**).\n\nUse the methods we've written in **Project 1** as much as possible to complete this problem. ","idx":3},"wrangling-asynchronousness":{"content":"# Wrangling Asynchronousness: Dealing with multiple requests\n---\n\nNext, we will talk about the asynch problem with handling AJAX requests. What happens when we try to combine a few AJAX calls at once?\n\n## Project Work\n---\n\n#### Project 2 (we do)\nLet's build a weather app. It will display the weather data from three cities in order. \n\nFor example, if my choices were:\n\n* NYC\n* Palo Alto\n* Moscow\n\nThen, I should see weather data for NYC before Palo Alto before Moscow.\n\nWe will use the [OpenWeatherMap](http://openweathermap.org/) API for this project.\n\n#### Follow up (you do)\nNow, let's make things interesting. **Combine** our work from the Giphy API with out work with this WeatherMap API. \n\n**How it should work**\n\nModify our app so that the weather for each city is accompanied by a gif from the Giphy API that reflects the current weather condition. It should load in the same order as defined above, though. \n\n**Example output**\n\nFor example, if it is rainy in NYC tomorrow and cloudy on Tuesday, I expect Monday's image to be:\n\n![alt text](https://media.giphy.com/media/xT5LMStuLNrOPa6hry/giphy.gif)\n\nand Tuesday's image to be:\n\n![alt text](https://media.giphy.com/media/xT5LMWxitRdSMvtS4E/giphy.gif)\n\n**Load sequence (challenge)**\n\nBuild the app so that the weather content for say New York **only** shows up after **both** the weather data **AND** the Giphy data has loaded.\n\n\n\n\n\n","idx":4},"exploring-restful-apis":{"content":"# Exploring RESTful APIs: What is REST? \n---\nAs it turns out, GET is only one of a few possible ways to interact with API data.\n\n## RESTful APIs\n---\nREST stands for **Representational State Transfer**. RESTful APIs define a protocol for requesting data from a server and/or requesting updates to the datastore of a server. \n\nThe REST protocol defines several verbs that can be used to request data/changes.\n\n#### GET\nThis is the one we know very well. GET requests are essentially DB reads, meaning we use GET requests to grab information as it is stored in the server.\n\n#### POST\nPOST requests send data to a specific API endpoint. The expectation is the API endpoint handler determines what to do with the data and responds with an identifier that describes the changes it made.\n\nTypically, we use POST requests to create new rows of data in a DB.\n\nFor example, doing something like\n\n`POST /v1/article/create`\n\nwould tell the server handling this request to create a new article row in the DB and return a unique identifier (ie: `id = 12483`) for the newly created row to the client.\n\n#### PUT\nThe PUT request typically will push some form of data (or \"resource\") directly to a specified endpoint. If no resource exists at that endpoint, it will create it. If a resource does exist at that endpoint, it will replace it.\n\nGoing back to our previous example, if we wanted to update our article, we could do something like:\n\n`PUT /v1/article/12483`\n\nAnd at this point, whatever data we pass along with our request will be updated into the db row that corresponds to that particular article.\n\n**Important note**\n\nWhen do you PUT and when do you POST? Theoretically, you can POST an update to a resource and you can PUT a new resource. \n\nTypically, you would PUT when you know the exact location (ie: `id = 12483`) of the resource. You should POST when you do **not** know what the location of the resource is and would rather have the server decide.\n\n#### DELETE\nDeletes a resource. Make sure you know it's location though.\n\n## Project Work\n---\n#### Project 3 (we do)\nLet's create a blog website using the [Trello API](https://developers.trello.com/).\n\nThis is a two part project. Part 1 -- this part -- will be concerned with creating a UI for bloggers to add content.\n\nPart 2 -- the follow up -- will be the creation of a \"front-end\" so that users on the internet can consume the blogged content. \n\n##### Premise\nWe wish to create a blogging app for users who want super basic blogs. We will use Trello as our \"backend\" because it is cheap and does not require a server (this is good for us to prototype out this MVP). \n\nWe want to abstract away everything that has to do with Trello, the user should not have to leave our app in order to do anything on Trello itself.\n\n##### Requirements\n1. User has the ability to create a new public board. This board will be the \"db\" for the subsequent articles.\n2. User has the ability to add an article with a \"tag\" (this basically means creating a card under a specific list)\n3. User has the ability to edit an article.\n4. User has the ability to delete an article.\n\n#### Follow up (You do)\nBuild out the \"frontend\" to this blogging app. Your frontend should (for now) get each **PUBLIC** board the user has, run through all the lists to get all the cards, and display those cards in reverse-chronological order. \n\nThis project is pretty data-retrieval heavy.\n\n\n\n","idx":5},"using-promises":{"content":"# Using Promises: Better handling asynchronous requests\n---\nWhat are promises and how can we use them to make it easier for us to draw data together from multiple sources?\n\n## Promises\n---\n\nPromises are awesome. They provide us a way to break out of super nested callback chains and replace them with a \"linear\" way of linking together multiple asynch operations.\n\n```js\n// example promise\nvar myProm = new Promise((resolve, reject) => {\n    someAsynchThing(\n        data=>resolve(data), // success\n        err=>reject(err) // fail\n    );\n});\n\n// later on...\nmyProm.then((data) => {\n    // do stuff with data...\n    return data;\n}).then((data) => {\n    // more stuff here if you need...\n}).catch((err) => {\n    // catch all for any errors in promise chain\n});\n```\n\n\n## Project Work\n---\n\n#### Project 4 (we do)\n\nLet's revisit our \"frontend\" blog app. What we will do is update the callback-pocalypse with promises. This should streamline our asynch calls and make our code much more \"flat\".\n\n#### Follow up (you do)\nDo the same for the user's \"admin interface\" that we completed in **Project 3**.","idx":6},"scratchpad":{"content":"# Scratchpad\n---\n\nIf we need to use functions across projects or something, I will paste here.\n\n#### Fork this project\n1. Create an account on [Samantha](http://samantha.fewd.us)\n2. [Fork this demo](http://samantha.fewd.us/#fork/mottaquikarim/jsapis06262016)\n\n<iframe class=\"samantha\" src=\"http://samantha.fewd.us/#broadcast/mottaquikarim/jsapis06262016\"></iframe>\n<script>\nvar s = document.querySelector('.samantha');\nvar p = s.parentNode;\nvar gp = p.parentNode;\np.removeChild(s);\ngp.appendChild(s);\n</script>","idx":7},"__list__":["home","title","desc","warm-up","wrangling-asynchronousness","exploring-restful-apis","using-promises","scratchpad"]}