{"home":{"content":"# Building JS Apps with API Data\n---\n\nHello, [Wrold](https://medium.com/@the_taqquikarim/console-log-hello-wrold-3e3abeb44396#.vk701xxec)! Welcome to Javascript APIs.\n\n### Objective\n---\nOur main today is to learn how we can leverage 3rd party APIs to enrich our webpages with dynamic data.\n\nWe will cover **public APIs** only, since those don't require anything more than some js code to configure. This means we will **not** talk about the twitter or facebook APIs which require a user authentication component to work correctly.\n\n### Game Plan\n---\n\n#### [Warm-up: Simple GET requests](#warm-up)\nThe assumption is you've probably worked with API data before. Even if you have not, with jQuery, it's literally just 4 or 5 lines of code to get started.\n\n#### [Wrangling Asynchronousness: Dealing with multiple requests](#wrangling-asynchronousness)\nHow do we force asynchronous requests to execute in order?\n\n#### [Exploring RESTful APIs: What is REST?](#exploring-restful-apis)\nWe have a good handle on GET requests, but what about all the other types? Specifically POST, PUT, DELETE?\n\n#### [Using Promises: Better handling asynchronous requests](#using-promises)\nWhat are promises and how can we use them to make it easier for us to draw data together from multiple sources?\n\n\n\n\n\n","idx":0},"title":{"content":"Building JS Apps with API Data","idx":1},"desc":{"content":"A crash course on APIs, AJAX, and promises.","idx":2},"warm-up":{"content":"# Warm-up: Simple GET requests\n---\n\nLet's take a moment to define the term `API` and how we can use them to retrieve data from remote resources.\n\n## Using APIs\n---\nSimply put, working with APIs require three distinct steps.\n\n### Requesting Data\nRequesting data involves delving into API documentation to understand which API endpoints to direct your requests towards.\n\nThen, you must actually make the GET request.\n\n\n### Retrieving Data\nData retrieval involves taking the server response from your GET requests.\n\nTypically, server responses will send back data in JSON format. It is up to the API consumer (you) to determine how to extract that data for usage in your app.\n\nAlso, don't forget to handle errors!\n\n### Displaying Data\nThis final piece involves updating the UI of your application with the data you extracted from the server response.\n\nGenerally, the techniques you may know from jQuery for injecting data won't do here. We will use some form of templating system to achieve our data displaying needs.\n\n## Project Work\n---\n\n#### Project 1 (we do)\nWe will build a simple Giphy Search Engine. User will input a search query which will lead to results rendered as gifs.\n\n**Requesting data**\n\nHere is the [Giphy API](https://api.giphy.com/) documentation.\n\nWe will also implement our own `$.get` request to understand the guts of how AJAX is handled in javascript.\n\n```js\nconst $ = {\n    get() {\n        /* ...implement GET... */\n    }\n};\n```\n\n**Retrieving Data**\n\nIdeally, we want to take the JSON response and convert it into an array or some other type of data structure that makes it easy for us to access the giph info (specifically in this case, the giph URL).\n\n```js\n// something like...\nconst data = JSON.data.map((gif) => {\n    const { src, title } = gif;\n    return { src, title };\n});\n```\n\n**Displaying Data**\n\nWe will use es6 string interpolation to handle our \"templating\". This is the most lightweight and easiest option.\n\n```js\nconst data = {}; /* data from prev section */\nreturn data.map((current) => {\n    return `\n<div>\n    ${current.src}\n</div>`;\n}).join('\\n');\n```\n\n\n#### Follow up (you do)\nBuild in an **I'm feeling lucky** feature. (In other words, user should be able to perform a search query and get back the top result **only**).\n\nUse the methods we've written in **Project 1** as much as possible to complete this problem. ","idx":3},"wrangling-asynchronousness":{"content":"# Wrangling Asynchronousness: Dealing with multiple requests\n---\n\nNext, we will talk about the asynch problem with handling AJAX requests. What happens when we try to combine a few AJAX calls at once?\n\n## Project Work\n---\n\n#### Project 2 (we do)\nLet's build a weather app. It will display the weather data from three cities in order. \n\nFor example, if my choices were:\n\n* NYC\n* Palo Alto\n* Moscow\n\nThen, I should see weather data for NYC before Palo Alto before Moscow.\n\nWe will use the [OpenWeatherMap](http://openweathermap.org/) API for this project.\n\n#### Follow up (you do)\nNow, let's make things interesting. **Combine** our work from the Giphy API with out work with this WeatherMap API. \n\n**How it should work**\n\nModify our app so that the weather for each city is accompanied by a gif from the Giphy API that reflects the current weather condition. It should load in the same order as defined above, though. \n\n**Example output**\n\nFor example, if it is rainy in NYC tomorrow and cloudy on Tuesday, I expect Monday's image to be:\n\n![alt text](https://media.giphy.com/media/xT5LMStuLNrOPa6hry/giphy.gif)\n\nand Tuesday's image to be:\n\n![alt text](https://media.giphy.com/media/xT5LMWxitRdSMvtS4E/giphy.gif)\n\n**Load sequence (challenge)**\n\nBuild the app so that the weather content for say New York **only** shows up after **both** the weather data **AND** the Giphy data has loaded.\n\n\n\n\n\n","idx":4},"exploring-restful-apis":{"content":"# Exploring RESTful APIs: What is REST? \n---","idx":5},"using-promises":{"content":"# Using Promises: Better handling asynchronous requests\n---\n","idx":6},"__list__":["home","title","desc","warm-up","wrangling-asynchronousness","exploring-restful-apis","using-promises"]}